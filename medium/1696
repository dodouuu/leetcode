/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */

let times = 0
var maxResult = function (nums, k) {
  times = 0
  if(nums.length > 90000) {
    for (let i = 0; i < nums.length && times<10000; i++) {
      if (nums[i] === -1) times++
    }
  }

  let originIndex = [...nums.keys()]

  const ans = cutPointsFromEnd(nums, k, originIndex)
  if(ans !== undefined) {
    return ans
  }

  cutPointsFromStart(nums, k, originIndex)

  const l = nums.length
  let dp = Array(l).fill()
  dp[l - 1] = nums[l - 1]

  dp[0] = recursive(nums[0], 0, nums, k, dp, originIndex)
  return dp[0]
};

// 從起點出發，遇到範圍 k 內的正數，可以無限砍之間的負數點
function cutPointsFromStart(nums, k, originIndex) {
  let max = -10001
  let maxIndex = 0
  let point = 0
  // console.log('before nums=', nums)
  while (point < nums.length - 1) {
    for (let i = point + 1; i <= point + k; i++) {
      if (originIndex[point]+k < originIndex[i]) break
      if (nums[i] > 0) {
        max = nums[i]
        maxIndex = i
        break
      }
    }
    if (max < 0) break
    else if (max > 0) {
      if (point + 1 === maxIndex) {
        max = -10001
        point = point + 1
        continue
      }
      nums.splice(point + 1, maxIndex - (point + 1))
      originIndex.splice(point + 1, maxIndex - (point + 1))

      max = -10001
      point = point + 1
    }
  }
  // console.log('before point, maxIndex', point, maxIndex)
  //     console.log('after cut from START nums=', nums)
  //     console.log('after originIndex=', originIndex)
}
function cutPointsFromEnd(nums, k, originIndex) {
  let point = nums.length - 1
  // console.log('before nums=', nums)
  // console.log('before originIndex=', originIndex)

  // 如果 point - 1 的點為負數，砍前方一樣的負數，
  // 砍鄰近相同負數，一路最遠可以砍到 point - k
  // 負數，僅限從終點出發那一次，可以砍一次
  let temp = 0
  let cutIndex = 0
  if(point - 1 >=0 && nums[point-1] < 0) {
    temp = nums[point-1]

    for (let i = point - 1; i >= point - k; i--) {
      cutIndex = i
      if (nums[i] !== temp) {
        cutIndex++
        break
      }
    }
    nums.splice(cutIndex + 1, point - cutIndex - 1)
    originIndex.splice(cutIndex + 1, point - cutIndex - 1)
    // console.log('before point, cutIndex', point, cutIndex)
    // console.log('after cut from End Negtive nums=', nums)
    // console.log('after originIndex=', originIndex)
  }

  point = nums.length - 1
  let max = -10001
  let maxIndex = nums.length - 1
  // 從終點出發，遇到範圍 k 內的正數，可以無限砍之間的負數點
  while (point > 0 && maxIndex > 0) {
    
    for (let i = point - 1; i >= point - k; i--) {
      if (originIndex[point] > originIndex[i]+k) break
      if (nums[i] > 0) {
        max = nums[i]
        maxIndex = i
        break
      }
    }

    if(max < 0) break
    else if (max > 0) {
      if(point === maxIndex+1) {
        max = -10001
        point = maxIndex
        continue
      }
      nums.splice(maxIndex + 1, point - maxIndex - 1)
      originIndex.splice(maxIndex + 1, point - maxIndex - 1)

      max = -10001
      point = maxIndex
    }
  }
  // console.log('before point, maxIndex', point, maxIndex)
  // console.log('after cut from End Positive nums=', nums)
  // console.log('after originIndex=', originIndex)

  if (point === 0) {
    let score = 0 
    for(let i=0; i<nums.length; i++) {
      score += nums[i]
    }
    return score
  }else {
    return undefined
  }
}

function recursive(score, i, nums, k, dp, originIndex) {

  let j = i + k
  if (j >= nums.length) j = nums.length - 1
  for (; j >= i + 1; j--) {
    
    if (originIndex[j] > originIndex[i] + k) continue

    if (dp[j] === undefined) {
      dp[j] = recursive(nums[j], j, nums, k, dp, originIndex)
    }

    if (dp[i] === undefined) {
      dp[i] = dp[j] + score
    }
    else {
      if (dp[j] + score > dp[i]) {
        dp[i] = dp[j] + score
      }
      if (dp[0] !== undefined && times >= 10000) return dp[i]
    }
  
  }
  return dp[i]
}