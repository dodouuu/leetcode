/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {void} Do not return anything, modify root in-place instead.
 */

let firstWrong = undefined
let secondWrong = undefined
let lastNode = undefined
const minVal = Math.pow(-2, 31) - 1

var recoverTree = function (root) {
  firstWrong = undefined
  secondWrong = undefined
  lastNode = new TreeNode(minVal, undefined, undefined)
  dfs(root)
  let temp = firstWrong.val
  firstWrong.val = secondWrong.val
  secondWrong.val = temp
}

function dfs(node) {
  if (node === null) {
    return
  }
  dfs(node.left)

  if (node.val > lastNode.val) { // 正常秩序
    lastNode = node
  } else {
    if (firstWrong === undefined) {
      firstWrong = lastNode
      secondWrong = node
      lastNode = node
    } else {
      secondWrong = node
      return
    }
  }
  dfs(node.right)
}


function TreeNode(val, left, right) {
  this.val = (val === undefined ? 0 : val)
  this.left = (left === undefined ? null : left)
  this.right = (right === undefined ? null : right)
}
// let node3 = new TreeNode(5)
let node2 = new TreeNode(5)
let node1 = new TreeNode(4)
let left = new TreeNode(2, node1)
let right = new TreeNode(3, undefined, node2)
let root = new TreeNode(1, left, right)

// console.log(left)
// console.log(right)
console.log(root)

const start = new Date().getTime();

// console.log(zigzagLevelOrder(root))

const end = new Date().getTime();
console.log('time=', end - start)
