/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */

const ascA = 97
var longestIdealString = function (s, k) {
  const l = s.length
  let dp = Array(l+1).fill().map(() => Array(26).fill(0))
  return recursive(s, k, 0, '', dp)
};

function recursive(s, k, index, lastChar, dp) {
  if(index === s.length) return 0
  if (lastChar !== '' && dp[index][lastChar.charCodeAt(0) - ascA] !== 0) return dp[index][lastChar.charCodeAt(0) - ascA]

  let pick = 0
  let notPick = 0
  const diff = lastChar.charCodeAt(0) - s[index].charCodeAt(0)

  if (k >= Math.abs(diff) || lastChar === '') {
    pick = 1 + recursive(s, k, index+1, s[index], dp)
  }
  notPick = recursive(s, k, index + 1, lastChar, dp)
  return dp[index][lastChar.charCodeAt(0) - ascA] = max(pick, notPick)
}

function max(a, b) {
  return a>b ? a : b
}