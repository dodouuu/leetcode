/**
 * @param {number[][]} triangle
 * @return {number}
 */

const maxSum = 2000001
var minimumTotal = function (triangle) {

  const m = triangle.length
  let dp = Array(m).fill().map(() => Array(m).fill(maxSum))

  dp[0][0] = triangle[0][0]
  for (let i = 1; i < m; i++) {
    const n = triangle[i].length
    for(let j=0; j<n; j++) {
      recursive(i, j, n, dp, triangle)
    }
  }
  let temp = maxSum
  for (let i = 0; i < triangle[m-1].length; i++) {
    if(dp[m-1][i] < temp) temp = dp[m-1][i]
  }
  return temp
};

function recursive(i, j, n, dp, triangle) {
  if (dp[i][j] !== maxSum) return dp[i][j]
  if (j < 0) return maxSum
  if (j >= n) return maxSum
  dp[i][j] = min(recursive(i - 1, j - 1, n - 1, dp, triangle), recursive(i - 1, j, n - 1, dp, triangle)) + triangle[i][j]
}

function min(a, b) {
  return a < b ? a : b
}

const triangle = [[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]]

minimumTotal(triangle)