/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
let validate = true

var isValidBST = function (root) {
  validate = true
  dfs(root, undefined)
  return validate
}
// 到 leaf 的時候，新創一個 array，push 此 node.val
// 針對每一個非 leaf，如果有 left child，把 left child 回傳上來的 array 最大值跟 node.val 比對，看是否合法
// 針對每一個非 leaf，如果有 right child，把 right child 回傳上來的 array 最小值跟 node.val 比對，看是否合法
// 如果前面一條規則無 left child，那 arrayRight 開頭 unshift node.val
// 最後再把 arrayLeft concat arrayRight 回傳上去給 parent

function dfs(node) {
  if (!node.left && !node.right) {
    let array = []
    array.push(node.val)
    return array
  }

  let arrayLeft = []
  let arrayRight = []

  if (node.left) {
    arrayLeft = dfs(node.left)
    const l = arrayLeft.length
    if (arrayLeft[l - 1] >= node.val) {
      validate = false
      return arrayLeft
    }
    arrayLeft.push(node.val)
  } 

  if (node.right) {
    arrayRight = dfs(node.right)
    if (arrayRight[0] <= node.val) {
      validate = false
      return arrayLeft
    }

    if (arrayLeft.length === 0) arrayRight.unshift(node.val)
    arrayLeft = arrayLeft.concat(arrayRight)
  }

  return arrayLeft
}


function TreeNode(val, left, right) {
  this.val = (val === undefined ? 0 : val)
  this.left = (left === undefined ? null : left)
  this.right = (right === undefined ? null : right)
}

// let node3 = new TreeNode(5)

let node2 = new TreeNode(5)

let node1 = new TreeNode(4)


let left = new TreeNode(2, node1)
let right = new TreeNode(3, undefined, node2)

let root = new TreeNode(1, left, right)

// console.log(left)
// console.log(right)
console.log(root)

const start = new Date().getTime();

// console.log(zigzagLevelOrder(root))

const end = new Date().getTime();
console.log('time=', end - start)
