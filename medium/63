/**
 * @param {number[][]} obstacleGrid
 * @return {number}
 */

var uniquePathsWithObstacles = function (obstacleGrid) {
  const m = obstacleGrid.length
  const n = obstacleGrid[0].length

  let dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0))
  if (obstacleGrid[0][0] === 1) return dp[1][1] = 0
  else dp[1][1] = 1

  return dp[m][n] = recursive(m, n, obstacleGrid, dp)
};

function recursive(m, n, obstacleGrid, dp) {
  if(m===0 || n===0) return 0
  if (dp[m][n] !== 0) return dp[m][n]

  if (obstacleGrid[m - 1][n - 1] === 1) return dp[m][n] = 0
  if(m-1>=0 && n-1>=0)
    return dp[m][n] = recursive(m - 1, n, obstacleGrid, dp) + recursive(m, n - 1, obstacleGrid, dp)
}

const obstacleGrid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]]
console.log(uniquePathsWithObstacles(obstacleGrid))
