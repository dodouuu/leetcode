/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[][]}
 */
const length = 1000
var levelOrder = function (root) {

  let ans = Array.from(Array(length), () => new Array())
  if (!root) return ans[0]

  let queue = []
  let parentLevel = []
  queue.push(root)
  parentLevel.push(-1)

  while (queue.length) {
    let parent = parentLevel.shift()
    if (parent !== -2) {
      const node = queue.shift()
      ans[parent+1].push(node.val)

      if (node.left) {
        queue.push(node.left)
        parentLevel.push(parent + 1)
      }
      else {
        parentLevel.push(-2)
      }

      if (node.right) {
        queue.push(node.right)
        parentLevel.push(parent + 1)
      }
      else {
        parentLevel.push(-2)
      }
    }
  }

  countAnsLength(ans)
  return ans
}

function countAnsLength(ans) {
  let l = 0
  for(let i=0; i<length; i++) {
    if(ans[i].length > 0) l = i
  }
  ans.length = l+1
}


function TreeNode(val, left, right) {
  this.val = (val === undefined ? 0 : val)
  this.left = (left === undefined ? null : left)
  this.right = (right === undefined ? null : right)
}

let node3 = new TreeNode(5)

let node2 = new TreeNode(4, node3)

let node1 = new TreeNode(3, node2)


let left = new TreeNode(2, node1)
// let right = new TreeNode(20, node1, node2)

let root = new TreeNode(1, left)

// console.log(left)
// console.log(right)
console.log(root)

const start = new Date().getTime();

console.log(levelOrder(root))

const end = new Date().getTime();
console.log('time=', end - start)
