/**
 * @param {number} n
 * @return {string[]}
 */

const ans = {
  '1': [],
  '2': [],
  '3': [],
  '4': [],
  '5': [],
  '6': [],
  '7': [],
  '8': [],
}
var generateParenthesis = function (n) {
  return ans[`${n}`]
};

// l = number of left parenthesis left
// r = number of right parenthesis left
// node = node of tree
// result = leaf of tree
function recursive(l, r, node, result) {
  if(r < l) return

  if(l > 0) {
    recursive(l-1, r, node+'(', result)
  }
  if(r > 0) {
    recursive(l, r-1, node + ')', result)
  }
  if(l===0 && r===0) {
    result.push(node)
  }
}

function dp(n) {
  let result = []
  recursive(n, n, '', result)
  ans[`${n}`] = result
}
for(let i=1; i<=8; i++) {
  dp(i)
}

for (let i = 1; i <= 2; i++) {
  console.log(ans[`${i}`])
}
generateParenthesis(8)