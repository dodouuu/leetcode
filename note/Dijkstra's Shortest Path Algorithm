/**
 * @param {number[]} arr
 * @return {number}
 */

var minJumps = function (arr) {
  const l = arr.length
  if (l === 1) return 0

  let distance = Array(l).fill(l)
  let visited = Array(l).fill(false)

  let unvisited = l
  let choice = []

  // adjacent[i] = adjacent nodes of arr[i]
  let adjacent = Array.from(Array(l), () => new Array())
  let unvisitedNum = Array(l).fill(0)

  for (let i = 0; i < l; i++) {
    for (let j = i + 1; j < l; j++) {
      if (arr[i] === arr[j]) {
        adjacent[i].push(j)
        unvisitedNum[i]++
        adjacent[j].push(i)
        unvisitedNum[j]++
      }
    }

    if (i - 1 >= 0 && !adjacent[i].includes(i - 1)) {
      adjacent[i].push(i - 1)
      unvisitedNum[i]++
    }
    if (i + 1 < l && !adjacent[i].includes(i + 1)) {
      adjacent[i].push(i + 1)
      unvisitedNum[i]++
    }
  }

  // console.log('adjacent=', adjacent)

  visited[l - 1] = true
  unvisited--
  distance[l - 1] = 0
  for (let j = 0; j < adjacent[l-1].length; j++) {
    distance[adjacent[l - 1][j]] = 1
  }

  Dijkstra(l - 1, arr, distance, adjacent, visited, unvisited, choice, unvisitedNum)
  // console.log('distance=', distance)

  return distance[0]
};

function Dijkstra(i, arr, distance, adjacent, visited, unvisited, choice, unvisitedNum) {

  while (unvisited) {
    
    for (let j = 0; j < adjacent[i].length && unvisitedNum[i]; j++) {
      // console.log('i=', i)

      if (visited[adjacent[i][j]]) {
        // console.log('adjacent is visted', adjacent[i][j])

        continue
      }

      let obj = new Object()
      obj.index = adjacent[i][j]
      obj.distance = distance[adjacent[i][j]]
      obj.from = i
      // obj.distance = findMinDistance(adjacent[i][j], adjacent, distance, arr, visited)

      const index = choice.findIndex(e => e.index === obj.index)
      if(index === -1) {
        const k = choice.findIndex(e => e.distance >= obj.distance && e.index > obj.index)
        // console.log('k=', k)

        if(k === -1)
          choice.push(obj)
        else
          choice.splice(k, 0, obj)
      }
      // else
      //   choice[index].distance = obj.distance
    }

    // console.log('choice=',choice)

    unvisitedNum[ choice[0].from ] --
    visited[choice[0].index] = true
    i = choice[0].index
    if(i===0) return

    // console.log('choose i=', i)

    for (let j = 0; j < adjacent[i].length && unvisitedNum[i]; j++) {
      if (!visited[adjacent[i][j]]) {
        distance[adjacent[i][j]] = Math.min(1 + distance[i], distance[adjacent[i][j]])

      }
    }

    choice.shift()
    unvisited--
  }

}

const arr = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404]

console.log(minJumps(arr))