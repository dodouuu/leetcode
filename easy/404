/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var sumOfLeftLeaves = function (root) {

  if (!root.left && !root.right) {
    return 0 // root is not a left child
  }
  return bfs(root)
}
// 多用一個 queue 記憶目前的 node 是不是 left child
function bfs(node) {
  let queue = []
  queue.push(node)

  let isLeaf = 2
  let isLeftLeaves = []
  isLeftLeaves.push(false) // root is not a left child

  let sum = 0
  let checkLeft = undefined

  while (queue.length) {
    let q = queue.length
    while (q--) {
      node = queue.shift()
      checkLeft = isLeftLeaves.shift()

      isLeaf = 2

      if (node.left) {
        queue.push(node.left)
        isLeaf--
        isLeftLeaves.push(true)
      }

      if (node.right) {
        queue.push(node.right)
        isLeaf--
        isLeftLeaves.push(false)
      }

      if (isLeaf === 2 && checkLeft === true) {
        sum += node.val
      }
    }
  }

  return sum
}