/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} p
 * @param {TreeNode} q
 * @return {boolean}
 */
function preorderTraversal(p, q) {
  if (!p && q || p && !q) return false

  let ansP = []
  let stackP = []
  let ansQ = []
  let stackQ = []

  stackP.push(p)
  stackQ.push(q)
  while (stackP.length && stackQ.length) {
    let nodeP = stackP.pop()
    let nodeQ = stackQ.pop()
    if (nodeP !== null && nodeQ === null || nodeP === null && nodeQ !== null ) {
      return false
    }
    if (nodeP !== null && nodeQ !== null ) {
      if (nodeP.val !== nodeQ.val) return false
      if (nodeP.right === null && nodeQ.right !== null) return false
      if (nodeP.left === null && nodeQ.left !== null) return false
      if (nodeP.right !== null && nodeQ.right === null) return false
      if (nodeP.left !== null && nodeQ.left === null) return false
    }

    if (nodeP) {
      ansP.push(nodeP.val)
      if (nodeP.right) stackP.push(nodeP.right)
      if (nodeP.left) stackP.push(nodeP.left)
    }
      
    if (nodeQ) {
      ansQ.push(nodeQ.val)
      if (nodeQ.right) stackQ.push(nodeQ.right)
      if (nodeQ.left) stackQ.push(nodeQ.left)
    }

    if (stackP.length !== stackQ.length)return false
  }

  return true
}

var isSameTree = function (p, q) {
  return preorderTraversal(p, q)
}