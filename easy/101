/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isSymmetric = function (root) {

  let leftStack = []
  let rightStack = []
  
  let right = root.right
  let left = root.left
  if (!left && !right) return true
  if (!left || !right) return false

  rightStack.push(right)
  leftStack.push(left)

  while (right && left && rightStack.length && leftStack.length) {
    
    left = leftStack.pop()
    right = rightStack.pop()

    if(!left || !right) return false
    if(left.val !== right.val) return false

    if(left.left === null && right.right !== null) return false
    if (left.left !== null && right.right === null) return false
    if (right.left === null && left.right !== null) return false
    if (right.left !== null && left.right === null) return false

    if (left.left) leftStack.push(left.left)
    if (left.right) leftStack.push(left.right)

    if (right.right) rightStack.push(right.right)
    if (right.left) rightStack.push(right.left)

  }

  return true
}