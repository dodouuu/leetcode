/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var minDepth = function (root) {

  if (!root) return 0
  return bfs(root)
}

function bfs(node) {
  let queue = []
  queue.push(node)
  let depth = 0

  let isLeaf = 2

  while (queue.length) {
    let q = queue.length
    while (q--) {
      node = queue.shift()

      isLeaf = 2

      if (node.left) {
        queue.push(node.left)
        isLeaf--
      }

      if (node.right) {
        queue.push(node.right)
        isLeaf--
      }

      if (isLeaf===2) return depth+1
    }
    depth++
  }

  return depth
}