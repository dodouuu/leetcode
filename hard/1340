/**
 * @param {number[]} arr
 * @param {number} d
 * @return {number}
 */
var maxJumps = function (arr, d) {
  const l = arr.length
  let dp = Array(l).fill(0)

  let adj = Array.from(Array(l), () => new Array())
  findAdj(arr, d, adj)

  for(let i=0; i<l; i++) {
    dp[i] = recursive(1, adj, dp, i, arr, d)
  }
  return Math.max(...dp)
};
function recursive(jump, adj, dp, i, arr, d) {
  const k = adj[i].length
  if(k===0) return jump

  for(let j=0; j<k; j++) {
    if (dp[adj[i][j]] > 0) {
      if (dp[adj[i][j]] + 1 > dp[i]) {
        dp[i] = dp[adj[i][j]] + 1
      }
    } else if (dp[adj[i][j]] === 0) {
      dp[adj[i][j]] = recursive(1, adj, dp, adj[i][j], arr, d)
      const temp = dp[adj[i][j]]+1
      if (temp > dp[i]) dp[i] = temp
    }
  }
  return dp[i]
}
function findAdj(arr, d, adj) {
  const l = arr.length
  for(let i=0; i<l; i++) {
    for(let j=i-1; j>=i-d && j>=0; j--) {
      if (arr[j] >= arr[i]) break
      else if (arr[j] < arr[i]) {
        adj[i].push(j)
      }
    }
    for (let j = i+1; j <= i + d && j <l; j++) {
      if (arr[j] > arr[i]) break
      else if (arr[j] < arr[i]) {
        adj[i].push(j)
      }
    }

  }
}

const arr = [23548, 52301, 80994, 11195, 73636, 18986, 90844, 6150, 72657, 33830, 1183, 34541, 80105, 53219, 17947, 69305, 55856, 28707, 85699, 16238, 84619, 93703, 40477, 14152, 13736, 2924, 9256, 4785, 5062, 17319, 77417, 23525, 38868, 88460, 17672, 50713, 70933, 29635, 20803, 59778, 79826, 40023, 83184, 12950, 90882, 51359, 47639, 46180, 81768, 15785, 55351, 17404, 7286, 91998, 27878, 65013, 55237, 45669, 91985, 1745, 31048, 81292, 2557, 8761, 77235, 78045, 49281, 22507, 32010, 56704, 91362]

const d = 12

const start = new Date().getTime();
console.log(maxJumps (arr, d))
const end = new Date().getTime();
console.log('time=', end-start)

