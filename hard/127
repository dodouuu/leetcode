/**
 * @param {string} beginWord
 * @param {string} endWord
 * @param {string[]} wordList
 * @return {number}
 */
var ladderLength = function (beginWord, endWord, wordList) {

  wordList.unshift(beginWord)

  // 找 wordList 裡面重複的 endWord，剔除，把 endWord push 在最後
  const index = wordList.indexOf(endWord)

  if (index === -1) { // endWord is not in wordList
    return 0
  } else {
    wordList.splice(index, 1)
    wordList.push(endWord)
  }

  const l = wordList.length
  let visited = Array(l).fill(false)
  let adjacent = Array.from(Array(l), () => new Array())
  setAdjacent(wordList, adjacent)

  return bfs(1, wordList, adjacent, visited)
};
function setAdjacent(wordList, adjacent) {
  const l = wordList.length
  for (let i = 0; i < l; i++) {
    for (let j = i + 1; j < l; j++) {
      if (onlyDiffOne(wordList[i], wordList[j])) {
        adjacent[i].push(j)
        adjacent[j].push(i)
      }
    }
  }
}
function onlyDiffOne(a, b) {
  const l = a.length
  let diff = 0
  for (let i = 0; i < l; i++) {
    if (a[i] !== b[i]) diff++
  }
  if (diff === 1) return true
  else return false
}
function bfs(steps, arr, adjacent, visited) {
  let queue = []
  const l = arr.length
  queue.push(0)
  visited[0] = true

  while (queue.length) {
    let q = queue.length
    while (q--) {
      const i = queue.shift()

      for (let j = 0; j < adjacent[i].length; j++) {
        if (visited[adjacent[i][j]] === false) {
          queue.push(adjacent[i][j])
          visited[adjacent[i][j]] = true
        }
      }

    }

    steps++
    if (visited[l-1] === true) return steps
  }
  return 0
}

const beginWord = "hit"
const endWord = "cog"

const wordList = ["hot", "dot", "dog", "lot", "log"]

console.log(ladderLength(beginWord, endWord, wordList))