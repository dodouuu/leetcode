/**
 * @param {string} beginWord
 * @param {string} endWord
 * @param {string[]} wordList
 * @return {string[][]}
 */
let numOut = 0
var findLadders = function (beginWord, endWord, wordList) {

  wordList.unshift(beginWord)
  const index = wordList.indexOf(endWord)
  const output = []

  if (index === -1) { // endWord is not in wordList
    return output
  } else { // 找重複的 endWord，剔除，把 endWord push 在最後
    wordList.splice(index, 1)
    wordList.push(endWord)
  }

  const l = wordList.length
  let diff = Array(l).fill(0)
  let visited = Array(l).fill(0)
  let adjacent = Array.from(Array(l), () => new Array())
  setAdjacent(wordList, adjacent)
  setDiff(wordList, diff)

  let speAdj = Array.from(Array(l), () => new Array())

  const steps = bfs(speAdj, 1, wordList, adjacent, visited)

  if (steps === 0) return output
  else {
    let out = Array.from(Array(60), () => new Array())
    numOut = 0

    let sequence = []
    sequence.push(wordList[0])

    let badPath = Array(l).fill(false)
    for(let i=0; i<l; i++) {
      if(visited[i] === 0) {
        badPath[i] = true
      }
    }

    dfs(diff, badPath, sequence, out, steps, 1, 0, wordList, speAdj, visited)
    out.length = numOut
    return out
  }
};
function setDiff(wordList, diff) {
  const l = wordList.length
  const wordLen = wordList[0].length
  for(let i=0; i<l; i++) {
    for(let j=0; j<wordLen; j++) {
      if(wordList[i][j] !== wordList[l-1][j]) {
        diff[i] ++
      }
    }
  }
}
function dfs(diff, badPath, sequence, out, minSteps, steps, i, wordList, speAdj, visited) {

  if (minSteps - steps <= wordList[0].length) {
    if (i === wordList.length - 1) {
      for (let j = 0; j < steps; j++) {
        out[numOut].push(sequence[j])
      }
      numOut++
      return
    }

    if (minSteps - steps < diff[i]) {
      badPath[i] = true
      return
    }
  }

  let hasSolution = false
  for (let j = 0; j < speAdj[i].length; j++) {

    if (badPath[speAdj[i][j]] === false) {
      hasSolution = true
      sequence.push(wordList[speAdj[i][j]])
      dfs(diff, badPath, sequence, out, minSteps, steps + 1, speAdj[i][j], wordList, speAdj, visited)
      sequence.pop()
    } 

  }
  if(hasSolution === false) {
    badPath[i] = true
  }
}

function setAdjacent(wordList, adjacent) {
  const l = wordList.length
  for (let i = 0; i < l; i++) {
    for (let j = i + 1; j < l; j++) {
      if (onlyDiffOne(wordList[i], wordList[j])) {
        adjacent[i].push(j)
        adjacent[j].push(i)
      }
    }
  }
}
function onlyDiffOne(a, b) {
  const l = a.length
  let diff = 0
  for (let i = 0; i < l; i++) {
    if (a[i] !== b[i]) diff++
  }
  if (diff === 1) return true
  else return false
}
function bfs(speAdj, steps, arr, adjacent, visited) {
  let queue = []
  const l = arr.length
  queue.push(0)
  visited[0] = 1

  while (queue.length) {
    let q = queue.length
    while (q--) {
      const i = queue.shift()

      for (let j = 0; j < adjacent[i].length; j++) {
        if (visited[adjacent[i][j]] === 0 ) {
          queue.push(adjacent[i][j])
          visited[adjacent[i][j]] = visited[i] + 1
          speAdj[i].push(adjacent[i][j])
        } else if (visited[adjacent[i][j]] === visited[i] + 1) {
          speAdj[i].push(adjacent[i][j])
        }
      }
    }
    // if (visited[l - 1] !== 0) return visited[l - 1]
    steps++
  }

  return visited[l - 1]
}

// const beginWord = "hit", endWord = "cog", wordList = ["hot", "dot", "dog", "lot", "log", "cog"]

const beginWord = "aaaaa",
  endWord = "ggggg",
  wordList = ["aaaaa", "caaaa", "cbaaa", "daaaa", "dbaaa", "eaaaa", "ebaaa", "faaaa", "fbaaa", "gaaaa", "gbaaa", "haaaa", "hbaaa", "iaaaa", "ibaaa", "jaaaa", "jbaaa", "kaaaa", "kbaaa", "laaaa", "lbaaa", "maaaa", "mbaaa", "naaaa", "nbaaa", "oaaaa", "obaaa", "paaaa", "pbaaa", "bbaaa", "bbcaa", "bbcba", "bbdaa", "bbdba", "bbeaa", "bbeba", "bbfaa", "bbfba", "bbgaa", "bbgba", "bbhaa", "bbhba", "bbiaa", "bbiba", "bbjaa", "bbjba", "bbkaa", "bbkba", "bblaa", "bblba", "bbmaa", "bbmba", "bbnaa", "bbnba", "bboaa", "bboba", "bbpaa", "bbpba", "bbbba", "abbba", "acbba", "dbbba", "dcbba", "ebbba", "ecbba", "fbbba", "fcbba", "gbbba", "gcbba", "hbbba", "hcbba", "ibbba", "icbba", "jbbba", "jcbba", "kbbba", "kcbba", "lbbba", "lcbba", "mbbba", "mcbba", "nbbba", "ncbba", "obbba", "ocbba", "pbbba", "pcbba", "ccbba", "ccaba", "ccaca", "ccdba", "ccdca", "cceba", "cceca", "ccfba", "ccfca", "ccgba", "ccgca", "cchba", "cchca", "cciba", "ccica", "ccjba", "ccjca", "cckba", "cckca", "cclba", "cclca", "ccmba", "ccmca", "ccnba", "ccnca", "ccoba", "ccoca", "ccpba", "ccpca", "cccca", "accca", "adcca", "bccca", "bdcca", "eccca", "edcca", "fccca", "fdcca", "gccca", "gdcca", "hccca", "hdcca", "iccca", "idcca", "jccca", "jdcca", "kccca", "kdcca", "lccca", "ldcca", "mccca", "mdcca", "nccca", "ndcca", "occca", "odcca", "pccca", "pdcca", "ddcca", "ddaca", "ddada", "ddbca", "ddbda", "ddeca", "ddeda", "ddfca", "ddfda", "ddgca", "ddgda", "ddhca", "ddhda", "ddica", "ddida", "ddjca", "ddjda", "ddkca", "ddkda", "ddlca", "ddlda", "ddmca", "ddmda", "ddnca", "ddnda", "ddoca", "ddoda", "ddpca", "ddpda", "dddda", "addda", "aedda", "bddda", "bedda", "cddda", "cedda", "fddda", "fedda", "gddda", "gedda", "hddda", "hedda", "iddda", "iedda", "jddda", "jedda", "kddda", "kedda", "lddda", "ledda", "mddda", "medda", "nddda", "nedda", "oddda", "oedda", "pddda", "pedda", "eedda", "eeada", "eeaea", "eebda", "eebea", "eecda", "eecea", "eefda", "eefea", "eegda", "eegea", "eehda", "eehea", "eeida", "eeiea", "eejda", "eejea", "eekda", "eekea", "eelda", "eelea", "eemda", "eemea", "eenda", "eenea", "eeoda", "eeoea", "eepda", "eepea", "eeeea", "ggggg", "agggg", "ahggg", "bgggg", "bhggg", "cgggg", "chggg", "dgggg", "dhggg", "egggg", "ehggg", "fgggg", "fhggg", "igggg", "ihggg", "jgggg", "jhggg", "kgggg", "khggg", "lgggg", "lhggg", "mgggg", "mhggg", "ngggg", "nhggg", "ogggg", "ohggg", "pgggg", "phggg", "hhggg", "hhagg", "hhahg", "hhbgg", "hhbhg", "hhcgg", "hhchg", "hhdgg", "hhdhg", "hhegg", "hhehg", "hhfgg", "hhfhg", "hhigg", "hhihg", "hhjgg", "hhjhg", "hhkgg", "hhkhg", "hhlgg", "hhlhg", "hhmgg", "hhmhg", "hhngg", "hhnhg", "hhogg", "hhohg", "hhpgg", "hhphg", "hhhhg", "ahhhg", "aihhg", "bhhhg", "bihhg", "chhhg", "cihhg", "dhhhg", "dihhg", "ehhhg", "eihhg", "fhhhg", "fihhg", "ghhhg", "gihhg", "jhhhg", "jihhg", "khhhg", "kihhg", "lhhhg", "lihhg", "mhhhg", "mihhg", "nhhhg", "nihhg", "ohhhg", "oihhg", "phhhg", "pihhg", "iihhg", "iiahg", "iiaig", "iibhg", "iibig", "iichg", "iicig", "iidhg", "iidig", "iiehg", "iieig", "iifhg", "iifig", "iighg", "iigig", "iijhg", "iijig", "iikhg", "iikig", "iilhg", "iilig", "iimhg", "iimig", "iinhg", "iinig", "iiohg", "iioig", "iiphg", "iipig", "iiiig", "aiiig", "ajiig", "biiig", "bjiig", "ciiig", "cjiig", "diiig", "djiig", "eiiig", "ejiig", "fiiig", "fjiig", "giiig", "gjiig", "hiiig", "hjiig", "kiiig", "kjiig", "liiig", "ljiig", "miiig", "mjiig", "niiig", "njiig", "oiiig", "ojiig", "piiig", "pjiig", "jjiig", "jjaig", "jjajg", "jjbig", "jjbjg", "jjcig", "jjcjg", "jjdig", "jjdjg", "jjeig", "jjejg", "jjfig", "jjfjg", "jjgig", "jjgjg", "jjhig", "jjhjg", "jjkig", "jjkjg", "jjlig", "jjljg", "jjmig", "jjmjg", "jjnig", "jjnjg", "jjoig", "jjojg", "jjpig", "jjpjg", "jjjjg", "ajjjg", "akjjg", "bjjjg", "bkjjg", "cjjjg", "ckjjg", "djjjg", "dkjjg", "ejjjg", "ekjjg", "fjjjg", "fkjjg", "gjjjg", "gkjjg", "hjjjg", "hkjjg", "ijjjg", "ikjjg", "ljjjg", "lkjjg", "mjjjg", "mkjjg", "njjjg", "nkjjg", "ojjjg", "okjjg", "pjjjg", "pkjjg", "kkjjg", "kkajg", "kkakg", "kkbjg", "kkbkg", "kkcjg", "kkckg", "kkdjg", "kkdkg", "kkejg", "kkekg", "kkfjg", "kkfkg", "kkgjg", "kkgkg", "kkhjg", "kkhkg", "kkijg", "kkikg", "kkljg", "kklkg", "kkmjg", "kkmkg", "kknjg", "kknkg", "kkojg", "kkokg", "kkpjg", "kkpkg", "kkkkg", "ggggx", "gggxx", "ggxxx", "gxxxx", "xxxxx", "xxxxy", "xxxyy", "xxyyy", "xyyyy", "yyyyy", "yyyyw", "yyyww", "yywww", "ywwww", "wwwww", "wwvww", "wvvww", "vvvww", "vvvwz", "avvwz", "aavwz", "aaawz", "aaaaz"]

const start = new Date().getTime();
console.log(findLadders(beginWord, endWord, wordList))
const end = new Date().getTime();
console.log('time=', end-start)

